-----
TO DO
-----

ability to manually change orientation
view based on orienation

x = map x in inches
y = map y in inches

(x1, x2), (y1, y2)
MUST ALSO TAKE INTO ACCOUNT ORIENTATION OF THE ENTITY

use this first

def rotate(origin, point, angle):
    """
    Rotate a point counterclockwise by a given angle around a given origin.

    The angle should be given in radians.
    """
    ox, oy = origin.x, origin.y
    px, py = point.x, point.y

    qx = ox + math.cos(angle) * (px - ox) - math.sin(angle) * (py - oy)
    qy = oy + math.sin(angle) * (px - ox) + math.cos(angle) * (py - oy)
    return Point(qx, qy)


depth: (0 + x, 0 + x) (0 + y, 10 + y)
width: (0 + x, 20 + x) (10 + y, 0 + y)
actually make for each face this way can determine depth

DETERMINE COORDINATES OF POINTS PERPENDICULAR TO END OF THE LINE
https://www.mathworks.com/matlabcentral/answers/484422-how-to-find-the-coordinates-of-a-point-perpendicular-to-a-line-knowing-the-distance

whether offset x is used or offet y should depend on whether the calculated deviation from aim point is positive or negative
positive - y, negative - x, although obviously offsets should not be negative

bullet hit: (attacker x, offset x perpendicular to centre) (attacker y, offset y perpendicular to centre)

def ccw(A,B,C):
    return (C.y-A.y) * (B.x-A.x) > (B.y-A.y) * (C.x-A.x)

for each surface:

# Return true if line segments AB and CD intersect
def intersect(A,B,C,D):
    return ccw(A,C,D) != ccw(B,C,D) and ccw(A,B,C) != ccw(A,B,D)

determine depth from angle - use slope of the line from attacker to hit position to determine where it intersects with
the other body part faces, use pythagorus to determine length of this line

https://stackoverflow.com/questions/20677795/how-do-i-compute-the-intersection-point-of-two-lines


bullets can pass through entities, continue and hit others
organ hits, tissue layers

use the Y offset to deterime where the bullet intersects on the Y plane with the body part faces and use pythagoras
theorem to determine actual depth of bodypart from where the bullet is passing through

Ideal item action handling:

Event handler --> consumable.get_action -> Action -> consumable.activate
      ^        |             |
      |        V             V
      ------------------------

New Model With Queue

-> = calls

Event handler --> consumable.get_action -> action.consume_ap / queue action -> Action.perform -> consumable.activate
      ^        |             |                      |
      |        V             V                      V
      ------------------------            consumable.get_ap_cost

SQUAD MODE

event_handler.handle_events -> event_handler.handle_action -> action.handle_action -> engine.handle_queued_actions
                                                                                          (player end turn)
                                                                                                  |
     ----------------------------------------------------------------------------------------------
     |
     V
for action.handle_action for actions in action.queue -> perform / tick down


input handler: reload (consumables class) -> calls action -> reloads

After that trading and other party options - reloading, ammo priority etc. Ammo priority should be a property of the
magazine class itself.

Custom Level Gen
-BSP algo
-Designate rooms
-Generate rooms within those rooms (sub rooms)
    - recusively split the rectangle in half
    - every room and sub room must have at least one entrance
-connect sub rooms
-connect sub rooms to outside
-dig out every wall tile that isnt a room

-place walls as cover
-idea: cavernous sniper duel maps with sparse buidlings but lots of pillars for cover and long engagement distances


Extended Goals
-tactical and speed reloads
-grenades
-dialogue
-doors
-Trigger mods
-unique enemies which spawn once per game
-each weapon part has a value. Total value of the weapon determines if it will be included in future runs.
-in the dungeon you find enemies using your looted equipment from previous runs
-more room shapes on level generation
-weapon graphics
-tracer rounds (increase full auto accuracy)
-ability to trade with players directly adjacent to you
-random cover spawns in levels
-enemies have side weapons and limited ammo, can change weapons
-bullets going through enemies
-adjustable sights

-try reducing exe size - use UPX
-grave yard (call it cemetary)

dialogue
- reloading
- out of ammo
- death rattle
- pain
- badly injured
- killed enemy
- leg crippled
- arm crippled
- gun jammed
- idle
- builds gun
- squad member dies
- sees abomination
- enemies dead (room clear)
- enemy spotted

1.5 seconds average to draw, aim, shoot - pistol
can pull trigger 4 times per second

pistol base line - Glock 17
rifle base line - M4

equip (pistol - from holster) - 75
equip (rifle - from sling) - 100
acquire target (pistol) - 50
acquire target (rifle) - 30
shoot (pistol and rifle) -

recoil reduction
    stock - 45%
    handguard - 15%
    pistol grip - 10%
    additional 5-10% for rifle stocks with integrated pistol grip

ap distance cost modifier
    stock - 0.7
    hand guard - 0.9
    pistol grip -

spread reduction
    stock - 0.86
    handguard - 0.9
    pistol grip -

target acquisition ap
    stock - 0.75
    handguard - 0.8
    pistol grip -

Barrel
barrel_length =
velocity_modifier =
target_acquisition_ap=
equip_time =


Handguard / Forward Grip
spread_modifier =
felt_recoil =
target_acquisition_ap =
ap_distance_cost_modifier =

Sights
zero_range =
spread_modifier =
target_acquisition_ap =
sight_height_above_bore =
ap_distance_cost_modifier =

pistol grip
spread_modifier =
felt_recoil =
target_acquisition_ap =
ap_distance_cost_modifier =

Stock
felt_recoil =
ap_distance_cost_modifier =
spread_modifier =
target_acquisition_ap =
